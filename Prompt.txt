Para desenvolver um sistema completo de controle de im√≥veis e alugu√©is para sua imobili√°ria, focado em PostgreSQL 9.3 como banco de dados local, Python com Flask para o backend, e HTML para o frontend, podemos seguir um guia detalhado. A ideia √© construir um sistema modular, intuitivo e com uma interface moderna.

üéØ Objetivo Geral do Sistema

Desenvolver um sistema robusto e intuitivo para a gest√£o completa de im√≥veis e alugu√©is, englobando cadastro de partes interessadas (clientes e fornecedores), controle de propriedades, gest√£o de contratos, movimenta√ß√µes financeiras (contas a pagar e a receber), e administra√ß√£o do pr√≥prio sistema (usu√°rios, backups). O sistema deve ser acess√≠vel via navegador web, hospedado em um servidor local.

üß± Estrutura Tecnol√≥gica

Backend: Python üêç (com Flask para o framework web)

Banco de Dados: PostgreSQL 9.3 (local)

Frontend: HTML5, CSS3 (com um framework CSS moderno como Bootstrap 5 ou Tailwind CSS para um visual atraente), JavaScript (para interatividade)

Conex√£o DB: psycopg2 (biblioteca Python para PostgreSQL)

Valida√ß√£o de CPF/CNPJ: Uma biblioteca Python espec√≠fica para valida√ß√£o de documentos brasileiros (ex: validate-docbr)

üöÄ M√≥dulos e Funcionalidades Detalhadas

O sistema ser√° dividido em m√≥dulos principais para facilitar a organiza√ß√£o e a navega√ß√£o.

1. M√≥dulo de Cadastros Essenciais

1.1. Cadastro de Fornecedores e Clientes (Pessoas) üë•

Campos:

id (PK, SERIAL)

documento (VARCHAR, UNIQUE, not null) - CPF ou CNPJ, com valida√ß√£o da Receita Federal.

razao_social_nome (VARCHAR, not null) - Raz√£o Social (CNPJ) ou Nome (CPF).

nome_fantasia (VARCHAR) - Ativo para CNPJ, inativo para CPF.

endereco (VARCHAR)

bairro (VARCHAR)

cidade (VARCHAR)

estado (CHAR(2))

cep (VARCHAR)

telefone (VARCHAR)

observacao (TEXT)

tipo (ENUM: 'Fornecedor', 'Cliente', 'Cliente/Fornecedor', not null)

status (ENUM: 'Ativo', 'Inativo', not null, padr√£o 'Ativo')

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Tela intuitiva com campos de entrada, m√°scaras para CPF/CNPJ e CEP.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar. Campo de busca r√°pida.

Valida√ß√£o: Implementar a l√≥gica de valida√ß√£o de CPF e CNPJ (d√≠gitos verificadores).

1.2. Cadastro de Im√≥veis üè°

Campos:

id (PK, SERIAL)

tipo_imovel (VARCHAR, ex: "Casa", "Apartamento", "Comercial", etc.)

endereco (VARCHAR, not null)

bairro (VARCHAR)

cidade (VARCHAR)

estado (CHAR(2))

cep (VARCHAR)

Informa√ß√µes de Registro:

registro (VARCHAR)

livro (VARCHAR)

folha (VARCHAR)

matricula (VARCHAR)

inscricao_iptu (VARCHAR, UNIQUE)

latitude (DECIMAL)

longitude (DECIMAL)

data_aquisicao (DATE)

valor_imovel (NUMERIC(15,2))

valor_previsto_aluguel (NUMERIC(15,2))

destinacao (VARCHAR, ex: "Residencial", "Comercial", "Misto")

observacao (TEXT)

data_cadastro (TIMESTAMP, padr√£o NOW())

Anexos:

Arquivos: Possibilidade de anexar m√∫ltiplos arquivos (contratos de compra, documentos, etc.). Armazenar o caminho para o arquivo no sistema de arquivos local ou um servi√ßo de armazenamento.

Fotos: Galeria de fotos do im√≥vel. Armazenar caminhos para as imagens.

Interface: Layout visual com campos bem definidos. Upload de m√∫ltiplos arquivos e fotos.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

1.3. Cadastro de Despesas üí∏

Campos:

id (PK, SERIAL)

descricao (VARCHAR, not null)

data_cadastro (TIMESTAMP, padr√£o NOW())

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

1.4. Cadastro de Origens üè∑Ô∏è

Campos:

id (PK, SERIAL)

descricao (VARCHAR, not null)

data_cadastro (TIMESTAMP, padr√£o NOW())

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

1.5. Cadastro de Receitas üí∞

Campos:

id (PK, SERIAL)

descricao (VARCHAR, not null)

data_cadastro (TIMESTAMP, padr√£o NOW())

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

2. M√≥dulo de Gest√£o de Im√≥veis e Alugu√©is

2.1. Movimenta√ß√µes do Im√≥vel üîÑ

Campos:

id (PK, SERIAL)

imovel_id (FK para Cadastro de Im√≥veis, not null)

tipo_movimentacao (ENUM: 'Compra', 'Venda', not null)

data_movimentacao (DATE, not null)

valor_movimentacao (NUMERIC(15,2), not null)

observacao (TEXT)

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Sele√ß√£o de im√≥vel, campos para tipo, data, valor e observa√ß√£o.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

2.2. Contrato de Aluguel üìù

Campos:

id (PK, SERIAL)

imovel_id (FK para Cadastro de Im√≥veis, not null)

cliente_id (FK para Cadastro de Fornecedores e Clientes - Tipo 'Cliente' ou 'Cliente/Fornecedor', not null)

nome_inquilino (VARCHAR, preenchido automaticamente do cliente_id)

endereco_inquilino (VARCHAR, preenchido automaticamente)

bairro_inquilino (VARCHAR, preenchido automaticamente)

cidade_inquilino (VARCHAR, preenchido automaticamente)

estado_inquilino (CHAR(2), preenchido automaticamente)

cep_inquilino (VARCHAR, preenchido automaticamente)

telefone_inquilino (VARCHAR, preenchido automaticamente)

data_inicio (DATE, not null)

data_fim (DATE, not null)

quantidade_parcelas (INTEGER, not null)

valor_parcela (NUMERIC(10,2), not null)

status_contrato (ENUM: 'Ativo', 'Encerrado', 'Pendente', 'Finalizado', not null, padr√£o 'Ativo')

observacao (TEXT)

data_cadastro (TIMESTAMP, padr√£o NOW())

Anexos:

Arquivos: Possibilidade de anexar m√∫ltiplos arquivos (contrato assinado, etc.).

Interface: Sele√ß√£o de im√≥vel e cliente, preenchimento autom√°tico de dados do inquilino, campos para datas, valores e anexos.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

2.3. Reajuste de Contrato üìà

Campos:

id (PK, SERIAL)

contrato_id (FK para Contrato de Aluguel, not null)

data_alteracao (DATE, not null)

percentual_reajuste (NUMERIC(5,2), not null)

novo_valor_parcela (NUMERIC(10,2), calculado automaticamente)

observacao (TEXT)

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Ao digitar o id do contrato, puxar automaticamente as informa√ß√µes do contrato de aluguel. Campos para data e percentual de reajuste. Calcular e exibir o novo valor da parcela.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

3. M√≥dulo Financeiro

3.1. Contas a Receber üí∞

Campos:

id (PK, SERIAL)

contrato_id (FK para Contrato de Aluguel, para contas de aluguel; pode ser NULO para outras receitas)

receita_id (FK para Cadastro de Receitas, not null)

cliente_id (FK para Cadastro de Fornecedores e Clientes - Tipo 'Cliente' ou 'Cliente/Fornecedor', not null)

titulo (VARCHAR)

data_vencimento (DATE, not null)

valor_previsto (NUMERIC(10,2), not null)

data_pagamento (DATE)

valor_pago (NUMERIC(10,2))

valor_desconto (NUMERIC(10,2), padr√£o 0.00)

valor_multa (NUMERIC(10,2), padr√£o 0.00)

valor_juros (NUMERIC(10,2), padr√£o 0.00)

observacao (TEXT)

status_conta (ENUM: 'Aberta', 'Paga', 'Vencida', 'Cancelada', not null, padr√£o 'Aberta')

origem_id (FK para Cadastro de Origens)

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Lan√ßamento manual ou gera√ß√£o autom√°tica a partir de contratos de aluguel. Campos para todos os valores, datas e status.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar. C√°lculos autom√°ticos de juros e multas baseados em regras configur√°veis (Opcional: tela de configura√ß√£o de regras de juros e multas).

3.2. Contas a Pagar üí∏

Campos:

id (PK, SERIAL)

despesa_id (FK para Cadastro de Despesas, not null)

fornecedor_id (FK para Cadastro de Fornecedores e Clientes - Tipo 'Fornecedor' ou 'Cliente/Fornecedor', not null)

titulo (VARCHAR, not null)

data_vencimento (DATE, not null)

valor_previsto (NUMERIC(10,2), not null)

data_pagamento (DATE)

valor_pago (NUMERIC(10,2))

valor_desconto (NUMERIC(10,2), padr√£o 0.00)

valor_multa (NUMERIC(10,2), padr√£o 0.00)

valor_juros (NUMERIC(10,2), padr√£o 0.00)

observacao (TEXT)

centro_custo (VARCHAR, ou FK para tabela de Centros de Custo - Recomendado para relat√≥rios futuros)

status_conta (ENUM: 'Aberta', 'Paga', 'Vencida', 'Cancelada', not null, padr√£o 'Aberta')

origem_id (FK para Cadastro de Origens)

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Lan√ßamento manual de despesas.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar. C√°lculos autom√°ticos de juros e multas.

4. M√≥dulo de Administra√ß√£o do Sistema

4.1. Cadastro de Usu√°rio üë§

Campos:

id (PK, SERIAL)

nome_usuario (VARCHAR, UNIQUE, not null)

senha_hash (VARCHAR, not null - Armazenar senhas com hash e salt, NUNCA em texto puro)

tipo_usuario (ENUM: 'Master', 'Operador', not null)

status (ENUM: 'Ativo', 'Inativo', not null, padr√£o 'Ativo')

data_cadastro (TIMESTAMP, padr√£o NOW())

Controle de Acesso (Permiss√µes):

Tabela Permissoes (ou similar) que relacione usuario_id, modulo (ex: 'Cadastro Fornecedores/Clientes', 'Cadastro Im√≥veis', etc.), acao (ENUM: 'Incluir', 'Editar', 'Consultar', 'Excluir', 'Bloquear').

Interface para configurar permiss√µes para cada usu√°rio/tipo de usu√°rio, por rotina e a√ß√£o.

Interface: Tela para cria√ß√£o e gerenciamento de usu√°rios, com um painel intuitivo para definir permiss√µes.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

4.2. Cadastro de Empresa Licenciada üè¢

Campos:

id (PK, SERIAL)

documento (VARCHAR, UNIQUE, not null) - CNPJ ou CPF, com valida√ß√£o da Receita Federal.

razao_social_nome (VARCHAR, not null)

nome_fantasia (VARCHAR) - Inativo para CPF.

endereco (VARCHAR)

bairro (VARCHAR)

cidade (VARCHAR)

estado (CHAR(2))

cep (VARCHAR)

telefone (VARCHAR)

observacao (TEXT)

status (ENUM: 'Ativo', 'Inativo', not null, padr√£o 'Ativo')

data_cadastro (TIMESTAMP, padr√£o NOW())

Interface: Similar ao cadastro de Pessoas, mas focado na pr√≥pria empresa que utiliza o sistema.

A√ß√µes: Bot√µes de Incluir, Alterar, Excluir, Consultar.

4.3. Rotina de Backup üíæ

Funcionalidade: Permitir ao usu√°rio gerar backups do banco de dados PostgreSQL.

Interface:

Campo para escolher o nome do arquivo de backup (sugest√£o: nome padr√£o com timestamp).

Campo para escolher o local de destino do arquivo (diret√≥rio local no servidor).

Grid com hist√≥rico de backups: Exibir data, nome do arquivo e status (sucesso/falha) dos backups anteriores. Bot√£o para restaurar (apenas para usu√°rios Master).

Execu√ß√£o: Bot√£o "Gerar Backup". No backend, utilizar o comando pg_dump do PostgreSQL via subprocesso Python.

‚ú® Recursos Adicionais para um Sistema "Mais Completo Poss√≠vel"

1. Relat√≥rios e Dashboards üìä

Financeiros:

Fluxo de Caixa (contas a pagar vs. a receber)

Contas a Receber por Status (vencidas, a vencer, pagas)

Contas a Pagar por Status

Demonstrativo de Resultados (receitas - despesas)

Im√≥veis:

Im√≥veis dispon√≠veis para aluguel

Im√≥veis alugados

Im√≥veis por tipo, cidade, bairro

Contratos:

Contratos pr√≥ximos do vencimento

Contratos reajustados

Visualiza√ß√£o: Utilizar bibliotecas Python para gr√°ficos (ex: Matplotlib, Plotly, Chart.js no frontend).

2. Notifica√ß√µes e Lembretes üîî

Contratos Pr√≥ximos do Vencimento: Notifica√ß√µes autom√°ticas via email ou painel do sistema.

Parcelas a Vencer: Lembretes para contas a receber e a pagar.

Reajustes Pendentes: Alertas para contratos que precisam ser reajustados.

3. Integra√ß√µes (Opcional, para o futuro) üîó

APIs de Mapas: Integra√ß√£o com Google Maps ou OpenStreetMap para visualiza√ß√£o de im√≥veis no mapa (utilizando Latitude/Longitude).

API de SMS/Email: Para envio de notifica√ß√µes automatizadas.

Gateway de Pagamento: Para recebimento online de alugu√©is (complexo, para uma fase posterior).

4. Gera√ß√£o de Documentos üìÑ

Gerar contratos de aluguel em PDF preenchidos automaticamente.

Gerar recibos de pagamento.

5. Auditoria (Log de Atividades) üïµÔ∏è‚Äç‚ôÄÔ∏è

Registrar quem fez o qu√™, quando e em qual m√≥dulo (ex: "Usu√°rio X alterou o contrato Y em Z data").

üé® Design e Usabilidade (UX/UI)

Layout Responsivo: O sistema deve ser utiliz√°vel em diferentes tamanhos de tela (desktops, tablets).

Navega√ß√£o Intuitiva: Menu claro e bem organizado, possivelmente um menu lateral com √≠cones e nomes de m√≥dulos.

Estilo Moderno: Utilizar um framework CSS como Bootstrap 5 ou Tailwind CSS.

Cores neutras com um toque de cor para real√ßar elementos importantes.

Fontes leg√≠veis.

√çcones visuais para facilitar a identifica√ß√£o de funcionalidades.

Cards para organizar informa√ß√µes, tabelas com pagina√ß√£o e busca.

Feedbacks Visuais: Mensagens de sucesso/erro claras ap√≥s cada opera√ß√£o.

Modais: Usar modais para confirmar exclus√µes ou para formul√°rios r√°pidos.